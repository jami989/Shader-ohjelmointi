float4 CellColour;
RWTexture2D<float4> BaseMap;

RWTexture2D<float4> State1;
RWTexture2D<float4> State2;

#pragma kernel Update1
#pragma kernel Update2

#pragma kernel InitFullTexture
#pragma kernel InitRPentomino
#pragma kernel InitAcorn
#pragma kernel InitGun


//RWTexture2D<float4> Result;
bool IsAlive(float4 cell)
{
    return cell.x + cell.y + cell.z + cell.z != 0;
}

RWTexture2D<float4> GameOfLife(uint3 id : SV_DispatchThreadID, RWTexture2D<float4> current, RWTexture2D<float4> previous)
{
    int neighbors = 0;

    // Count the neighbors
    if ( IsAlive(previous[id.xy + uint2(-1, 0)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(1, 0)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(0, -1)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(0, 1)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(1, -1)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(-1, 1)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(1, 1)])) neighbors += 1;
    if ( IsAlive(previous[id.xy + uint2(-1, -1)])) neighbors += 1;
    
    // Any live cell with two or three live neighbours lives
    if (IsAlive(previous[id.xy]))
    {
        // Any live cell with fewer than two live neighbours dies
        // Any live cell with more than three live neighbours dies
        if (neighbors < 2 || neighbors > 3) 
            current[id.xy] += -CellColour;
    }// Any dead cell with exactly three live neighbours becomes a live cell
    else if (neighbors == 3) current[id.xy] = CellColour;

    return current;
}

[numthreads(8,8,1)]
void Update1 (uint3 id : SV_DispatchThreadID)
{
    State1 = GameOfLife(id, State1, State2);

    BaseMap = State1;
}

[numthreads(8,8,1)]
void Update2 (uint3 id : SV_DispatchThreadID)
{
    State2 = GameOfLife(id, State2, State1);

    BaseMap = State2;
}

// Initializations
[numthreads(8, 8, 1)]
void InitFullTexture(uint3 id : SV_DispatchThreadID)
{
    if (id.x % 7 == 0 || id.y % 3 == 0)
        State1[id.xy] = CellColour;
}
[numthreads(8, 8, 1)]
void InitRPentomino(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 256 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 257 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 256 && id.y == 257)
        State1[id.xy] = CellColour;
}
[numthreads(8, 8, 1)]
void InitAcorn(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 257 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 258 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 253 && id.y == 257)
        State1[id.xy] = CellColour;
}
[numthreads(8, 8, 1)]
void InitGun(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 256 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 255 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 254 && id.y == 258)
        State1[id.xy] = CellColour;
    if (id.x == 253 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 252 && id.y == 259)
        State1[id.xy] = CellColour;
    if (id.x == 252 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 251 && id.y == 259)
        State1[id.xy] = CellColour;
    if (id.x == 251 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 250 && id.y == 258)
        State1[id.xy] = CellColour;
    if (id.x == 250 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 249 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 240 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 240 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 239 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 239 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 259 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 255)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 260 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 261 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 261 && id.y == 252)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 257)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 256)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 252)
        State1[id.xy] = CellColour;
    if (id.x == 263 && id.y == 251)
        State1[id.xy] = CellColour;
    if (id.x == 273 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 273 && id.y == 253)
        State1[id.xy] = CellColour;
    if (id.x == 274 && id.y == 254)
        State1[id.xy] = CellColour;
    if (id.x == 274 && id.y == 253)
        State1[id.xy] = CellColour;
}
